<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <title>Items - LifeLinkr</title>

    <%-include('../header');  -%>
       


            <!-- content -->
            <div class="container-fluid">

                <!-- charts -->
                <div class="col-lg-12 pl-lg-0 mt-2">
                    <h4 class="primary">View All Items</h4>
                </div>
                <div class="chart">
                    <div class="row">
                        <div class="col-4 mb-3 mb-3">
                            <div class="form-group"><label class="input__label">Search</label><input type="text" id="searchBox" class="form-control input-style" placeholder=""></div>
                          </div>
                        <div class="col-lg-12 pl-lg-3 chart-grid mt-1">
                            <!--part 1-->
                            <div class="card card_border">
									<table class="table2" id="tblid">
									<tr>
									
									<th>Code</th>
									<th>Item Name</th>
									<th>Molecule</th>
									<th>Selling Price</th>
									<th>Category</th>
									<th width="10%">View</th>
									</tr>
                                    <tbody id="tbodyid">

                                    </tbody>
									
									</table>
                                    

                                </div>
                                <div id="paginationControls"></div>
                            </div>
                            <!--part 1 ended-->

                        </div>
                    </div>
                    <div class="form-group mb-3 text-right">
                        <button type="button" onclick=" window.location.href = '/item-master'" class="btn-primary btn-style btn mr-2"><strong><i
                            class="fa-solid fa-plus"></i> New</strong></button>
                            <button id="uploadExcelButton" class="btn btn-primary">Upload Excel</button>
                    </div>
                </div>
                <!-- //charts -->
            </div>
            <!-- Trigger Button -->


<!-- Modal Structure -->
<div id="excelPreviewModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.6); z-index: 9999;">
  <div style="position: relative; margin: 50px auto; background: #fff; width: 80%; max-height: 90%; overflow: auto; padding: 20px; border-radius: 5px;">
    <h2>Bulk Upload Excel</h2>
    <a id="downloadExcel" href="/download-excel" download>Download Excel File</a>
    <button id="closeModalButton" style="float: right; background: red; color: white; border: none; padding: 5px 10px; cursor: pointer;">Close</button>
    <button id="sendToBackendButton" style="display: none; background: green; color: white; border: none; padding: 10px 20px; cursor: pointer;">UploadÂ Item</button>
    <input type="file" id="excelFileInput" style="margin-bottom: 20px;">
    <table id="excelPreviewTable" style="width: 100%; border-collapse: collapse; display: none; border: 1px solid #ddd;">
      <thead style="background: #f4f4f4;"></thead>
      <tbody></tbody>
    </table>
  </div>
</div>


            <%-include('../footer');  -%>
            <script >


                $(document).ready(function() {

         
                // Function to fetch and display data
                function fetchData() {
                  $.ajax({
                    url: '/getItems',
                    type: 'GET',
                    success: function(data) {
                        console.log(data)
                      let tableRows = '';
                      
                      data.forEach(function(item) {
                          
                        tableRows += `
                          <tr data-bbm-id="${item.id}">
        
        <td>${item.code}</td>
        <td>${item.name}</td>
        <td>${item.molecule}</td>
        <td>${item.sellingPrice}</td>
        <td>${item.category}</td>
        <td><button type="button" id="view_btn" class="btn btn-primary btn-style btn-change">View</button></td>
      </tr>
                        `;
                      });
                    
                      $('#tbodyid').html(tableRows);
                      pagi_search('#searchBox','#tblid','#paginationControls')
                      $('#tblid').on('click', '#view_btn', function() {
                        const id=$(this).closest('tr').data('bbm-id')
                        const route='item-master'
                          ViewBtn(route,id)
                         });
                         
                    },
                    error: function(xhr, status, error) {
                      console.error('Error fetching classification details:', error);
                    }
                  });
                }
              
                // Fetch data on page load
                fetchData();
              });
              
              </script>
              <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
              <script>
                let parsedJsonData = []; // To store the parsed JSON data
              
                document.getElementById('uploadExcelButton').addEventListener('click', () => {
                  document.getElementById('excelPreviewModal').style.display = 'block';
                });
              
                document.getElementById('closeModalButton').addEventListener('click', () => {
                  document.getElementById('excelPreviewModal').style.display = 'none';
                  document.getElementById('excelFileInput').value = ''; // Clear file input
                  const table = document.getElementById('excelPreviewTable');
                  table.style.display = 'none'; // Hide table
                  table.querySelector('thead').innerHTML = ''; // Clear table head
                  table.querySelector('tbody').innerHTML = ''; // Clear table body
                  document.getElementById('sendToBackendButton').style.display = 'none'; // Hide "Send to Backend" button
                });
              
                document.getElementById('excelFileInput').addEventListener('change', (event) => {
                  const file = event.target.files[0];
                  if (!file) {
                    alert('Please select an Excel file');
                    return;
                  }
              
                  const reader = new FileReader();
                  reader.onload = (e) => {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, { type: 'array' });
              
                    // Convert the first sheet to JSON
                    const sheetName = workbook.SheetNames[0];
                    const rawData = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], { header: 1 });
              
                    // Map and validate fields according to the schema
                    const headers = rawData[0]; // Assume the first row contains headers
                    const requiredHeaders = ["code", "name", "molecule", "sellingPrice", "category"];
              
                    if (!requiredHeaders.every((header) => headers.includes(header))) {
                      alert('The uploaded Excel file is missing required columns: code, name, molecule, sellingPrice, category.');
                      return;
                    }
              
                    // Parse and map rows to match schema
                    parsedJsonData = rawData.slice(1).map((row) => {
                      const rowObj = {};
                      headers.forEach((header, index) => {
                        rowObj[header] = row[index] || null; // Map headers to their corresponding cell
                      });
                      return {
                        code: rowObj.code || '',
                        name: rowObj.name || '',
                        molecule: rowObj.molecule || '',
                        sellingPrice: rowObj.sellingPrice || '',
                        category: rowObj.category || '',
                      };
                    });
              
                    // Display the data in a table
                    const table = document.getElementById('excelPreviewTable');
                    const thead = table.querySelector('thead');
                    const tbody = table.querySelector('tbody');
              
                    // Clear any existing content
                    thead.innerHTML = '';
                    tbody.innerHTML = '';
              
                    // Populate the table header
                    const headerRow = document.createElement('tr');
                    headers.forEach((header) => {
                      const th = document.createElement('th');
                      th.textContent = header.toUpperCase();
                      th.style.border = '1px solid #ddd';
                      th.style.padding = '8px';
                      th.style.textAlign = 'left';
                      headerRow.appendChild(th);
                    });
                    thead.appendChild(headerRow);
                    let flag = true;
              
                    // Populate the table body
                    parsedJsonData.forEach((row) => {
                      const tr = document.createElement('tr');
                      console.log(row);
                      
                      requiredHeaders.forEach((field) => {
                        const td = document.createElement('td');
                        if(row[field]=== null || row[field]=== undefined || row[field] === ""){
                          console.log("hello");
                          
                          tr.style.backgroundColor = "lightcoral";
                          tr.style.color = "white";
                          flag = false;
                        }
                        td.textContent = row[field] || ''; // Use empty string if cell is null/undefined
                        td.style.border = '1px solid #ddd';
                        td.style.padding = '8px';
                        tr.appendChild(td);
                      });
                      tbody.appendChild(tr);
                    });
              
                    // Show the table and the "Send to Backend" button
                    table.style.display = 'table';
                    if(flag){
                      document.getElementById('sendToBackendButton').style.display = 'inline-block';
                    }else{
                      alert("Sorry cannot upload this file to backend your file has missing columns.")
                    }
                    
                  };
              
                  reader.readAsArrayBuffer(file);
                });
              
                // Function to send JSON data to the backend
                        
                document.getElementById("sendToBackendButton").addEventListener("click", async () => {
  const fileInput = document.getElementById("excelFileInput");
  const file = fileInput.files[0];

  if (!file) {
    alert("Please select a file.");
    return;
  }

  const formData = new FormData();
  formData.append("file", file);

  try {
    const response = await fetch("/uploadExcelData", {
      method: "POST",
      body: formData,
    });

    if (response.ok) {
      const result = await response.json();
      alert(`File uploaded successfully! ${result.insertedCount} items inserted.`);
      console.log(result);
    } else {
      const error = await response.json();
      alert(`Error uploading file: ${error.message}`);
      console.error(error);
    }
    document.getElementById("sendToBackendButton").style.display = "none";
  } catch (error) {
    console.error("Error uploading file:", error);
    alert("An error occurred while uploading the file.");
  }
});

              </script>