<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <title>EMR - LifeLinkr</title>
 
    <%-include('../header');  -%>
    <script>var wsection = "EMR";</script>

	<style>.left-right-myometrium-div{max-height:5000px;} .dt{font-size: 14px;
			font-weight: bold;}.ft14{font-size:14px;padding-left: 1rem;
            color: #666;}#fxdpart{position:fixed;width:100%;z-index:999;top:40px;}.dspn{display:none;}</style>
        <style>
            .calendar {
              display: grid;
              grid-template-columns: 100px repeat(7, 1fr);
              border: 1px solid #ddd;
            }
      
            .time-slot {
              border-bottom: 1px solid #ddd;
              text-align: center;
              padding: 10px;
              height: 45px;
            }
      
            .date-header {
              background-color: #f8f9fa;
              border-bottom: 2px solid #ddd;
              text-align: center;
              padding: 10px;
              font-weight: bold;
            }
      
            .appointment {
              position: absolute;
              width: 95%;
              background-color: #007bff;
              color: #fff;
              padding: 4px 5px;
              font-size: 13px;
              border-radius: 4px;
              cursor: pointer;
            }
      
            .appointment-container {
              position: relative;
              border: 1px solid #ddd;
              height: 45px;
            }
            .ovrflwy{max-height:218px;overflow-y:scroll;}
          </style>
        
        <!-- main content start -->
            <!-- content -->
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-8 myometrium-container">
                        <div class="row">
                            <div class="col-xl-12 px-0">
                                <div class="d-flex  justify-content-between top-myometrium" id="fxdpart">
                                    <div class="heading-myomertium d-flex align-items-center">
                                        <i class="fas fa-user mr-2"></i>
                                        <span id="patientDetails"></span>
										<input type="hidden" name="patientId" id="patientId">
                                    </div>
                                </div>

                            </div>
                        </div>
                        

                        <div class="row left-right-myometrium-div mt-2">
                            <div class="col-xl-12 my-2">
                                <div class="col-xl-12 my-2">
                                    <select name="" class="form-select input-style" id="diseaseSelect">
                                        <option value="">Select</option>
                                    </select>
                                </div>
								<div class="mt-4">
									<div class="card">
										<div class="card-header d-flex justify-content-between align-items-center px-2 py-0">
											<span class="myo-left-right">Complaint</span>
											<div class="Open-close-icon" onclick="toggleCardBody('complaintCardBody', 'complaintToggleIcon')">
												<i id="complaintToggleIcon" class="fa-solid fa-angles-up"></i>
											</div>
										</div>
										<form id="complaintForm">
											<div class="card-body dspn" id="complaintCardBody">
												<!-- Complaint Summary to be populated by JavaScript -->
												
												<div id="errordiv"></div>
								
												<div id="complaintsContainer">
													<!-- New complaints will be dynamically added here by JavaScript -->
												</div>
								
												<div class="d-flex gap-2 flex-wrap mt-3 text-right">
                                                    <label  class="btn-secondary btn-style btn mr-2" onclick="addNewRow()">
                                                        <i title="Add New Row" class="fas fa-plus"></i> Add Row</label>

													<button type="submit" id="finalSubmit" class="btn btn-primary btn-style mr-2">
														<i class="far fa-save"></i> Save
													</button>
												</div>
											</div>
										</form>
									</div>
								</div>
								
								<div class="mt-4">
									<div class="card">
										<div class="card-header d-flex justify-content-between align-items-center px-2 py-0">
											<span class="myo-left-right">Recommended Tests</span>
											<div class="Open-close-icon" onclick="toggleCardBody('recommendedTestsCardBody', 'recommendedTestsToggleIcon')">
												<i id="recommendedTestsToggleIcon" class="fa-solid fa-angles-up"></i>
											</div>
										</div>
										<div class="card-body dspn" id="recommendedTestsCardBody">
											<form id="recommendedTestsForm">
												<div id="errordiv3"></div>
												<!-- Container to append new test rows -->
								               <div id="recommendedTestAdd"></div>
												<!-- Common Comment Field for All Tests -->
												<div class="form-group mt-3">
                                                <label class="input__label"><input onclick="shbtn('rccomt','rccomtdv')" type="checkbox" id="rccomt" name="rccomt" value="1" /> Mention Comment</label>
												
                                                <div id="rccomtdv" class="dspn">	
                                                <label for="testComment" class="input__label">Comment</label>
													<input type="text" class="form-control input-style" id="testComment" name="testComment" placeholder="Add comment for tests" data-validation="" data-error-message="Comment is required">
												</div>
                                                
                                            </div>
								
												<div class="d-flex gap-2 flex-wrap mt-3 text-right">
                                                    <label class="btn-secondary btn-style btn mr-2" onclick="addTestRow()">
														<i title="Add New Row" class="fas fa-plus"></i> Add
													</label>

													<button type="submit" id="saveTests" class="btn btn-primary btn-style mr-2">
														<i class="far fa-save"></i> Save
													</button>
												</div>
											</form>
										</div>
									</div>
								</div>
								
								
								
								
	<div class="mt-4">
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center px-2 py-0">
            <span class="myo-left-right">Prescription</span>
            <div class="Open-close-icon" onclick="toggleCardBody('prescriptionCardBody', 'prescriptionToggleIcon')">
                <i id="prescriptionToggleIcon" class="fa-solid fa-angles-up"></i>
            </div>
        </div>

        <form id="prescriptionForm">
            <div class="card-body dspn" id="prescriptionCardBody">
                <div id="errordiv4"></div>

                <!-- Container for the current prescription entry -->
                <div class="mt-3 table-responsive" style="overflow: visible;">
                    <table class="table table-bordered prescription-table">
                        <thead>
                            <tr>
                                <th>Drug/Molecule</th>
                                <th>Dose</th>
                                <th>Frequency</th>
                                <th>Days</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody id="prescriptionTable">

                        </tbody>
                    </table>
                </div>

                <div class="comments-inp-div">
                    <div class="form-group">
                        <label class="input__label"><input onclick="shbtn('prcomt','prscomtdv')" type="checkbox" id="prcomt" name="rccomt" value="1" /> Mention Comment</label>
                        
                        <div id="prscomtdv" class="dspn">
                        <label for="prescribedComment" class="input__label">Comments</label>
                        <input type="text" name="prescribedComment" id="prescribedComment" placeholder="Comments" class="form-control input-style">
                      </div>
                    </div>
                </div>

                <div class="d-flex gap-2 flex-wrap mt-3 text-right">
                    <button type="button" id="prescriptionAdd" onclick="addNewPrescriptionRow()" class="btn-secondary btn-style btn mr-1">
                        <strong><i class="fa-solid fa-plus"></i> Add</strong>
                    </button>
                    <button type="button" id="printPrescription" class="btn-primary btn-style btn mr-2" onclick="printCurrentPrescription()">
						<strong><i class="fa-solid fa-print"></i> Print</strong>
					</button>
                    <button type="submit" id="savePrescription" class="btn btn-primary btn-style mr-2">
                        <i class="far fa-save"></i> Save
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>


								<div class="mt-4">
									<div class="card">
										<div class="card-header d-flex justify-content-between align-items-center px-2 py-0">
											<span class="myo-left-right">History</span>
											<div class="Open-close-icon" onclick="toggleCardBody('historyCardBody', 'historyToggleIcon')">
												<i id="historyToggleIcon" class="fa-solid fa-angles-up"></i>
											</div>
										</div>
										<form id="EmrHistory">
											<div class="card-body dspn" id="historyCardBody">
												<div id="errordiv5"></div>
												<div class="row">
													<div class="col-md-11">
														<div class="form-group">
															<label for="history" class="input__label">Add History</label>
															<textarea class="form-control input-style" id="history" name="history" data-validation="required" data-error-message="History is required"></textarea>
														</div>
													</div>
												</div>
												<div class="d-flex gap-2 flex-wrap mt-3 text-right">
													<button type="submit" id="finalSubmit" class="btn btn-primary btn-style mr-2">
														<i class="far fa-save"></i> Save
													</button>
												</div>
											</div>
										</form>
									</div>
								</div>
								
                                <div class="mt-4">
                                    <div class="card">
                                        <div class="card-header d-flex justify-content-between align-items-center px-2 py-0">
                                            <span class="myo-left-right">Follow Up</span>
                                            <div class="Open-close-icon" id="cardright-toggle">
                                                <i id="folwup" class="fa-solid fa-angles-up" onclick="toggleCardBody('examinationCardBody', 'folwup')"></i>
                                            </div>
                                        </div>
                                        <div class="card-body dspn" id="examinationCardBody">
										<div class="row">
                                        <!-- Follow-Up Options -->
                                        <div class="col-md-7">
                                            <div class="form-group">
                                            <label for="history" class="input__label">Next Follow Up in Days</label>
                                            <button class="btn btn-outline-secondary btn-style" onclick="setFollowUpDate(3)">3</button>
                                            <button class="btn btn-outline-secondary btn-style" onclick="setFollowUpDate(5)">5</button>
                                            <button class="btn btn-outline-secondary btn-style" onclick="setFollowUpDate(7)">7</button>
                                            <button class="btn btn-outline-secondary btn-style" onclick="setFollowUpDate(10)">10</button>
                                            <button class="btn btn-outline-secondary btn-style" onclick="setFollowUpDate(15)">15</button>
                                            <button class="btn btn-outline-secondary btn-style" onclick="setFollowUpDate(30)">30</button>
                                        </div>
                                    </div>

                                        <div class="col-md-5">
                                            <div class="form-group">
                                                <input type="date" id="followUpDate" class="form-control input-style" placeholder="dd/mm/yyyy">
                                            </div>

                                        </div>
                                        <div class="d-flex gap-2 flex-wrap mt-3 text-right">
                                            <button type="button" id="aptSubmit" class="btn btn-primary btn-style mr-2">
                                                <i class="far fa-save"></i> Save
                                                </button>
                                        </div>
										</div>
										</div>
										</div>

										<div class="d-flex gap-2 flex-wrap mt-3 text-right">
										<!-- <button type="button" id="aptSubmit" class="btn btn-primary btn-style mr-2">
										<i class="far fa-save"></i> Save
										</button> -->
										</div>
                                        </div>
                                    </div>
                                </div>

								<div class="d-flex  justify-content-between top-myometrium">
                                    <div class="heading-myomertium d-flex align-items-center">
                                    <span>Recorded By: Dr. <%=username%></span>
                                    </div>
                                    </div>
								
                            </div>

                    <div class="col-md-4 myometrium-container mt-2">
                        <div class="mt-4">
                            <div class="card">
                                <div class="card-header d-flex justify-content-between align-items-center px-2 py-0">
                                    <span class="myo-left-right">Previous History</span>
                                    <div class="Open-close-icon" onclick="toggleCardBody('prevhstry', 'prevhistoryToggleIcon')">
                                        <i id="prevhistoryToggleIcon" class="fa-solid fa-angles-down"></i>
                                    </div>
                                </div>
                            <div class="card-body " id="prevhstry">
                                <label class="myo-left-right">Complaints</label>
                                <div id="complaintSummary" class="prvdv ovrflwy"></div>
                                <label class="myo-left-right">History</label>
                                <div id="historyDiv" class="history-container ovrflwy"></div>
                                <label class="myo-left-right">Reports</label>
                                <div id="reportsDiv" class="history-container ovrflwy"></div>


                                <label class="myo-left-right mt-2">Recommended Tests</label>
                                <div id="recommendedTestsContainer" class="ovrflwy"></div>

                                <!-- <label class="myo-left-right mt-2">Medicines</label> -->
                                <!--div id="complaintSummary" class="prvdv"></div-->
                                
                                <label class="myo-left-right mt-2">Previous Prescription</label>
                                <div id="previousPrescriptionsContainer"class="ovrflwy"></div>
                                
                            </div>
                    </div>
                </div>
                    </div>

                 </div>
                </div>
            </div>

            </div>

             <!-- Modal Structure -->
    <div
    class="modal fade"
    id="myModal"
    tabindex="-1"
    aria-labelledby="myModalLabel"
    aria-hidden="true"
  >
    <div class="modal-dialog modal-xl">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="myModalLabel">My Appointments</h5>
          <button
            type="button"
            class="btn-close"
            data-bs-dismiss="modal"
            aria-label="Close"
          ></button>
        </div>
        <div class="modal-body">
          <div class="calendar" id="calendarID">
            <!-- Date Headers -->
            <div class="date-header"></div>
            <!-- Empty for time slots -->
            <div class="date-header">Mon, 11 Oct</div>
            <div class="date-header">Tue, 12 Oct</div>
            <div class="date-header">Wed, 13 Oct</div>
            <div class="date-header">Thu, 14 Oct</div>
            <div class="date-header">Fri, 15 Oct</div>
            <div class="date-header">Sat, 16 Oct</div>
            <div class="date-header">Sun, 17 Oct</div>

            <!-- Time Slots -->
            <div class="time-slot">10:00 AM</div>
            <div class="appointment-container" id="mon-10"></div>
            <div class="appointment-container" id="tue-10"></div>
            <div class="appointment-container" id="wed-10"></div>
            <div class="appointment-container" id="thu-10"></div>
            <div class="appointment-container" id="fri-10"></div>
            <div class="appointment-container" id="sat-10"></div>
            <div class="appointment-container" id="sun-10"></div>

            <div class="time-slot">11:00 AM</div>
            <div class="appointment-container" id="mon-11"></div>
            <div class="appointment-container" id="tue-11"></div>
            <div class="appointment-container" id="wed-11"></div>
            <div class="appointment-container" id="thu-11"></div>
            <div class="appointment-container" id="fri-11"></div>
            <div class="appointment-container" id="sat-11"></div>
            <div class="appointment-container" id="sun-11"></div>

            <div class="time-slot">12:00 PM</div>
            <div class="appointment-container" id="mon-12"></div>
            <div class="appointment-container" id="tue-12"></div>
            <div class="appointment-container" id="wed-12"></div>
            <div class="appointment-container" id="thu-12"></div>
            <div class="appointment-container" id="fri-12"></div>
            <div class="appointment-container" id="sat-12"></div>
            <div class="appointment-container" id="sun-12"></div>
          </div>
        </div>
      </div>
    </div>
  </div>

            <%-include('../footer');  -%>
			<script>

                const visitSaved='<%=visitSaved%>';
              if (visitSaved==='false') {
        // Display the alert message
        alert('Visit not marked. Please complete the visit.');

        // Disable all toggle icons by modifying their styles
        document.querySelectorAll('.Open-close-icon').forEach(function(toggleIcon) {
            toggleIcon.style.pointerEvents = 'none';  // Disables clicks
            toggleIcon.classList.add('disabled');     // Optionally, add a disabled class for styling
        });
    }
                function setFollowUpDate(days) {
                    const followUpDateInput = document.getElementById("followUpDate");
                    const currentDate = new Date();
                    
                    // Add the specified number of days to the current date
                    currentDate.setDate(currentDate.getDate() + days);
                    
                    // Format the date as yyyy-mm-dd for the date input
                    const year = currentDate.getFullYear();
                    const month = String(currentDate.getMonth() + 1).padStart(2, '0');
                    const day = String(currentDate.getDate()).padStart(2, '0');
                    const formattedDate = `${year}-${month}-${day}`;
                    
                    // Set the calculated date to the input
                    followUpDateInput.value = formattedDate;
                }
            </script>
            <script>
			
			
				// Populate patient details
				document.getElementById('patientDetails').innerText = `<%= data.name %>, <%= data.gender %>, <%= data.age %> Yrs, <%= data.weight_Kg %> KG, <%= data.height_Feet %> Feet, Pulse: <%= examination.pulse %>, BMI: <%= examination.bmi%>`;
				document.getElementById('patientId').value = '<%= data.id %>';
			
// Initialize complaintsData directly from server-side JSON data
let complaintsData = JSON.parse('<%- JSON.stringify(complaints) %>');

// Check and log the complaints data
console.log("Complaints Data:", complaintsData);

				// Parse tests data from the server
let testsData = [];
try {
    testsData = JSON.parse('<%- JSON.stringify(tests) %>');
} catch (error) {
    console.error("Error parsing tests data:", error);
}
			
				// Parse examination data from JSON string safely
				const examinationData = JSON.parse('<%- JSON.stringify(examination) %>');
				console.log("Examination Data:", examinationData);

             
				let prescriptionsData = [];  // Parsed from server data
let prescribedComment = '';  // Latest prescription comment

try {
    prescriptionsData = JSON.parse('<%- JSON.stringify(prescriptions) %>');  // Parse JSON data for prescriptions
} catch (error) {
    console.error("Error parsing prescriptions data:", error);
}

function populatePrescriptions() {
    const previousContainer = document.getElementById('previousPrescriptionsContainer');
    const commentField = document.getElementById('prescribedComment'); // Latest comment input field

    // Clear any existing content
    previousContainer.innerHTML = '';

    // Check if there are no prescriptions
    if (!prescriptionsData || prescriptionsData.length === 0 || prescriptionsData.every(entry => entry.prescriptions.length === 0)) {
        previousContainer.innerHTML = '<p>No Medicine Prescribed.</p>';
        return;
    }

    // Populate the latest prescription comment if available
    commentField.value = prescribedComment || '';

    // Display each prescription entry grouped by date
    prescriptionsData.forEach((entry, index) => {
        const entryDiv = document.createElement('div');
        entryDiv.classList.add('mb-4', 'p-3', 'border', 'rounded');
        entryDiv.setAttribute('id', `prescriptionEntry-${index}`);

        // Display the date
        const date = new Date(entry.createdAt).toLocaleDateString();
        const dateParagraph = document.createElement('p');
        dateParagraph.classList.add('font-weight-bold');
        dateParagraph.innerText = `${formatDate(date)}`;
        entryDiv.appendChild(dateParagraph);

        // Table for prescriptions
        const table = document.createElement('table');
        table.classList.add('table', 'table-bordered', 'prescription-table', 'table-responsive', 'ft14');
        table.innerHTML = `
            <thead>
                <tr>
                    <th>Drug/Molecule</th>
                    <th>Dose</th>
                    <th>Frequency</th>
                    <th>Days</th>
                </tr>
            </thead>
        `;

        const tbody = document.createElement('tbody');

        entry.prescriptions.forEach(prescription => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${prescription.drug}</td>
                <td>${prescription.dose}</td>
                <td>${prescription.frequency}</td>
                <td>${prescription.days}</td>
            `;
            tbody.appendChild(row);
        });

        table.appendChild(tbody);
        entryDiv.appendChild(table);

        // Only display the comment if there is one
        if (entry.prescribedComment) {
            const commentDiv = document.createElement('div');
            commentDiv.classList.add('mt-2');
            commentDiv.innerHTML = `<strong>Comment:</strong> ${entry.prescribedComment}`;
            entryDiv.appendChild(commentDiv);
        }

        // Add a print button for each prescription entry
        const printButton = document.createElement('button');
        printButton.classList.add('btn', 'btn-primary', 'btn-style', 'mt-2');
        printButton.innerHTML = `<i class="fa-solid fa-print"></i> Print Prescription`;
        printButton.setAttribute('onclick', `printPrescription('prescriptionEntry-${index}')`);
        entryDiv.appendChild(printButton);

        // Append the entry to the previous prescriptions container
        previousContainer.appendChild(entryDiv);
    });
}

function printPrescription(entryId) {
    const printContents = document.getElementById(entryId).innerHTML;
    const originalContents = document.body.innerHTML;

    document.body.innerHTML = `<html><head><title>Print Prescription</title></head><body>${printContents}</body></html>`;

    window.print();

    document.body.innerHTML = originalContents;
    window.location.reload(); // Reloads to restore the original page content
}

function printCurrentPrescription() {
    // Get the prescription table and comment section
    const prescriptionTable = document.getElementById('prescriptionTable');
    const commentField = document.getElementById('prescribedComment');

    // Create a clone of the prescription content to convert inputs to plain text
    const clonedTable = prescriptionTable.cloneNode(true);
    const clonedComment = commentField.cloneNode(true);

    // Replace input values with plain text in the cloned table
    Array.from(clonedTable.querySelectorAll('input, select')).forEach(element => {
        const cell = document.createElement('td');
        cell.textContent = element.value;
        element.parentElement.replaceChild(cell, element);
    });

    // Create the printable HTML content
    const printableContent = `
        <html>
            <head>
                <title>Print Prescription</title>
                <style>
                    body { font-family: Arial, sans-serif; padding: 20px; }
                    .card { border: 1px solid #ccc; padding: 15px; border-radius: 8px; }
                    .card-header { font-size: 1.2em; font-weight: bold; margin-bottom: 10px; }
                    .table { width: 100%; border-collapse: collapse; }
                    .table th, .table td { border: 1px solid #ccc; padding: 8px; text-align: left; }
                </style>
            </head>
            <body>
                <div class="mt-4 card">
                    <div class="card-header d-flex justify-content-between align-items-center px-2 py-0">
                        <span class="myo-left-right">Prescription</span>
                    </div>
                    <div class="card-body">
                        <table class="table table-bordered">
                            ${clonedTable.innerHTML}
                        </table>
                        <div class="mt-3">
                            <strong>Comments:</strong> ${clonedComment.value || 'No comment'}
                        </div>
                    </div>
                </div>
            </body>
        </html>
    `;

    // Open a new window and print the content
    const printWindow = window.open('', '_blank');
    printWindow.document.open();
    printWindow.document.write(printableContent);
    printWindow.document.close();
    printWindow.print();
}

// document.addEventListener('DOMContentLoaded', populatePrescriptions);
			// ================================
				// Complaint Form Functions
				// ================================
			
// Function to populate complaints grouped by entry date
function populateComplaints() {
    const complaintSummary = document.getElementById('complaintSummary');
    console.log("Complaints Data:", complaintsData);

    // Check if complaintsData is available and an array
    if (Array.isArray(complaintsData) && complaintsData.length > 0) {
        // Clear existing content
        complaintSummary.innerHTML = '';

        // Loop over each entry in complaintsData
        complaintsData.forEach(entry => {
            console.log("Processing entry:", entry);

            // Create a container div for each entry date
            const entryDiv = document.createElement('div');
            entryDiv.classList.add('complaint-entry', 'mb-2', 'p-2', 'border', 'rounded');

            // Format and set the date for each entry
            const date = new Date(entry.createdAt).toLocaleDateString();
            const dateParagraph = document.createElement('p');
            dateParagraph.classList.add('dt', 'font-weight-bold');
            dateParagraph.innerText = `${formatDate(entry.createdAt)}`;
            //dateParagraph.innerText = date;
            entryDiv.appendChild(dateParagraph);

            // Create a list to display complaints for each date
            const complaintList = document.createElement('ul');
            complaintList.classList.add('ft14');

            // Loop through complaints in the entry and add each to the list
            entry.complaints.forEach(complaint => {
                console.log("Adding complaint:", complaint);

                const listItem = document.createElement('li');
                listItem.innerText = `${complaint.complaint} - ${complaint.since} `;
                complaintList.appendChild(listItem);
            });

            // Append the complaints list and entry div to the main container
            entryDiv.appendChild(complaintList);
            complaintSummary.appendChild(entryDiv);
        });
    } else {
        // Show a message if no complaints data is available
        complaintSummary.innerHTML = '<p>No complaints available to display.</p>';
        console.warn("No complaints data available to display.");
    }
}

 // Parse the JSON data properly
 const history = JSON.parse('<%- JSON.stringify(history) %>') || [];
    console.log("History Data:", history);

    document.addEventListener("DOMContentLoaded", () => {
        populateHistory();
    });

    function populateHistory() {
        const historyDiv = document.getElementById('historyDiv');
        historyDiv.innerHTML = ''; // Clear any existing content

        // Check if history is an array and has entries
        if (Array.isArray(history) && history.length > 0) {
            history.forEach((entry) => {
                const historyItem = document.createElement('div');
                const date = new Date(entry.createdAt).toLocaleDateString();
                const historyText = entry.history || '';

                // Create HTML content for each history entry
                historyItem.innerHTML = `
                    <p class="dt font-weight-bold">${formatDate(date)}</p>
                    <p class="ft14">${historyText}</p>
                    <hr>
                `;

                // Append the history item to the historyDiv
                historyDiv.appendChild(historyItem);
            });
        } else {
            // Display a message if no history data is available
            historyDiv.textContent = 'No history data available.';
        }
    }
// Collect complaint data from form inputs
				function collectComplaintData() {
					const complaintsData = [];
					const complaintInputs = document.querySelectorAll('input[name="complaint[]"]');
					const sinceInputs = document.querySelectorAll('input[name="since[]"]');
					const patientId = document.getElementById('patientId').value;
			
					complaintInputs.forEach((input, index) => {
						const complaintText = input.value;
						const sinceDuration = sinceInputs[index].value;
			
						if (complaintText && sinceDuration) {
							complaintsData.push({
								complaint: complaintText,
								since: sinceDuration, 
							});
						}
					});
			
					const formData = {
						patientId: patientId,
						complaints: complaintsData
					};
			
					console.log("Complaint Form Data:", JSON.stringify(formData));
					return formData;
				}
			
				// ================================
				// Examination Form Functions
				// ================================
			
				// Populate examination data into the form
				function populateExaminationData(examination) {
					if (!examination) return;
			
					document.getElementById('heightFeet').value = examination.heightFeet || '';
					document.getElementById('weightKg').value = examination.weightKg || '';
					document.getElementById('temperature').value = examination.temperature || '';
					document.getElementById('pulse').value = examination.pulse || '';
					document.getElementById('bmi').value = examination.bmi || '';
					document.getElementById('bloodPressure').value = examination.bloodPressure || '';
			
					const bloodGroupSelect = document.getElementById('bloodGroup');
					if (examination.bloodGroup) {
						bloodGroupSelect.value = examination.bloodGroup;
					} else {
						bloodGroupSelect.selectedIndex = 0; // Default to placeholder
					}
				}
			


// Function to populate recommended tests grouped by entry date
function populateTests() {
    const container = document.getElementById('recommendedTestsContainer');

    if (Array.isArray(testsData) && testsData.length > 0) {
        container.innerHTML = ''; // Clear existing rows

        testsData.forEach(entry => {
            // Create a container for each entry date
            const entryDiv = document.createElement('div');
            entryDiv.classList.add('test-entry', 'mb-4', 'p-3', 'border', 'rounded');

            // Format and set the date for this entry
            const date = new Date(entry.createdAt).toLocaleDateString();
            const dateParagraph = document.createElement('p');
            dateParagraph.classList.add('dt', 'font-weight-bold');
            dateParagraph.innerText = `${formatDate(date)}`;
            entryDiv.appendChild(dateParagraph);

            // Create a bulleted list to display each test
            const testList = document.createElement('ul');
            testList.classList.add('pl-3', 'mb-3'); // Add padding for bullets
            entry.tests.forEach(test => {
                const testItem = document.createElement('li');
                testItem.classList.add('test-item');
                testItem.innerText = `${test.test}`;
                testList.appendChild(testItem);
            });
            entryDiv.appendChild(testList);

            // Separate comment section
            const commentDiv = document.createElement('div');
            commentDiv.classList.add('comment-section', 'mt-3', 'p-2', 'bg-light', 'border', 'rounded');
            commentDiv.innerHTML = `
                <label class="input__label font-weight-bold">Comment:</label>
                <p class="form-control-static">${entry.comment || ''}</p>
            `;
            entryDiv.appendChild(commentDiv);

            container.appendChild(entryDiv);
        });
    } else {
        container.innerHTML = '<p>No Test Recommended.</p>';
        console.warn("No tests data available to display.");
    }
}
		// ===============================
				// Add/Remove Row Functions
				// ===============================
			
				function addNewRow() {
					const container = document.getElementById('complaintsContainer');
					const newRow = document.createElement('div');
					newRow.classList.add('row', 'align-items-center', 'mb-2');
					newRow.innerHTML = `
						<div class="col-md-8">
							<div class="form-group">
								<input type="text" class="form-control input-style" name="complaint[]" placeholder="Add Complaints" data-validation="required" data-error-message="Complaint is required">
							</div>
						</div>
						<div class="col-md-3">
							<div class="form-group">
								<input type="text" class="form-control input-style" name="since[]" placeholder="Since" data-validation="required" data-error-message="Since is required">
							</div>
						</div>
						<div class="col-md-1 text-center">
							<i title="Remove Row" class="btn-secondary btn-style btn fas fa-minus " onclick="removeRow(this)"></i>
						</div>`;
					container.appendChild(newRow);
				}
				
				function addNewPrescriptionRow() {
    const prescriptionTable = document.getElementById('prescriptionTable');
    const newRow = document.createElement('tr');
    newRow.classList.add('my-3', 'gap-4', 'justify-content-between', 'align-items-center', 'row-0');

    newRow.innerHTML = `
        <td class="form-group position-relative">
            <input type="text" class="form-control input-style search-input" placeholder="Type to search..."
                   name="drug" data-validation="required" data-error-message="Drug/Molecule is required">
            <ul class="list-group position-absolute w-100 suggestions-list" style="max-height: 200px; overflow-y: auto;z-index:99;"></ul>
        </td>
        <td><input type="number" name="dose" placeholder="Dose" class="form-control input-style" 
                   data-validation="required" data-error-message="Dose is required"></td>
        <td>
            <select name="frequency" class="form-select input-style" 
                    data-validation="required" data-error-message="Frequency is required">
                <option value="" disabled selected>Select Frequency</option>
                <option value="TID">TID</option>
                <option value="BID">BID</option>
                <option value="QID">QID</option>
                <option value="OD(1-0-0)">OD(1-0-0)</option>
                <option value="HS">HS</option>
                <option value="STAT">STAT</option>
                <option value="OD(0-1-0)">OD(0-1-0)</option>
                <option value="OD(0-0-1)">OD(0-0-1)</option>
                <option value="6T">6T</option>
                <option value="8T">8T</option>
                <option value="Once">Once</option>
                <option value="5T">5T</option>
                <option value="7T">7T</option>
                <option value="SOS">SOS</option>
                <option value="MT">MT</option>
                <option value="WT">WT</option>
            </select>
        </td>
        <td><input type="number" name="days" placeholder="Days" class="form-control input-style" 
                   data-validation="required" data-error-message="Days are required"></td>
        <td class="text-center">
            <button type="button" class="btn btn-danger btn-style" onclick="removePrescriptionRow(this)">
                <i class="fa-solid fa-minus"></i>
            </button>
        </td>
    `;

    prescriptionTable.appendChild(newRow);
}

// Function to add a new test row with data fetched from the API
function addTestRow() {
    const container = document.getElementById('recommendedTestAdd');
    if (!container) {
        console.error("Container for recommended tests not found");
        return;
    }
    
    // Create a new row for the test selection and removal button
    const newRow = document.createElement('div');
    newRow.classList.add('row', 'align-items-center', 'mb-2');

    // Set up the basic structure of the row
    newRow.innerHTML = `
        <div class="col-md-5">
            <div class="form-group">
                <select class="form-control input-style" name="selectTest[]" data-validation="required" data-error-message="Test selection is required">
                    <option value="" disabled selected>Loading Tests...</option>
                </select>
            </div>
        </div>
        <div class="col-md-2 text-center">
            <button type="button" class="btn btn-danger btn-style" onclick="removeTestRow(this)">
                <i class="fa-solid fa-minus"></i>
            </button>
        </div>
    `;

    // Append the new row to the container
    container.appendChild(newRow);

    // Select the dropdown we just added
    const selectDropdown = newRow.querySelector('select');

    // Fetch test data and populate the dropdown
    axios.get('/getTests') // Replace with your actual endpoint
        .then(response => {
            const tests = response.data;
            // Clear previous options if any
            selectDropdown.innerHTML = `<option value="" disabled selected>Select a Test</option>`;

            // Populate dropdown with fetched test options
            tests.forEach(test => {
                const option = document.createElement('option');
                option.value = test.name;  // or test.id, based on your API data
                option.textContent = `${test.name}`;
                selectDropdown.appendChild(option);
            });
        })
        .catch(error => {
            console.error('Error fetching test data:', error);
            selectDropdown.innerHTML = `<option value="" disabled selected>Error loading tests</option>`;
        });
}

// Function to remove a test row
function removeTestRow(button) {
    const row = button.closest('.row');
    if (row) {
        row.remove();
    }
}



// Function to remove a row
function removePrescriptionRow(button) {
    const row = button.closest('tr');
    if (row) {
        row.remove();
    }
}




				function removeRow(button) {
					button.closest('.row').remove();
				}


			
				// ===============================
				// Form Submission Event Listeners
				// ===============================
			
				$(document).ready(function () {
					console.log("Document is ready");
			
					// Submit handler for complaints form
					$('#complaintForm').on('submit', function (event) {
    event.preventDefault();
    const { isValid, errorMessage } = validateForm('#complaintForm');
    const formData = collectComplaintData();
    const errorDivId = '#errordiv';

    // Check if there is at least one complaint
    if (formData.complaints.length === 0) {
        alert("Please add at least one complaint.");
        return; // Prevent form submission
    }

    if (isValid) {
        saveForm(formData, errorDivId, '/saveEmrCompaints', '#loadingIndicator');
        resetForm('complaintForm'); populateComplaints();
    } else {
        $(errorDivId).removeClass('alert-success').addClass('alert-danger').text(errorMessage).show();
    }
});

					// Submit handler for examination form
					$('#examinationForm').on('submit', function (event) {
						event.preventDefault();
						const { isValid, errorMessage, formData } = validateForm('#examinationForm');
						formData.patientId = $('#patientId').val(); // Append patient ID to form data
			
						const errorDivId = '#errordiv2';
						if (isValid) {
							saveForm(formData, errorDivId, '/saveEmrExamination', '#loadingIndicator');
						} else {
							$(errorDivId).removeClass('alert-success').addClass('alert-danger').text(errorMessage).show();
						}
					});
				
					// Submit handler for History form
					$('#EmrHistory').on('submit', function (event) {
						event.preventDefault();
						const { isValid, errorMessage, formData } = validateForm('#EmrHistory');
						formData.patientId = $('#patientId').val(); // Append patient ID to form data
			
						const errorDivId = '#errordiv5';
						if (isValid) {
							saveForm(formData, errorDivId, '/saveEmrHistory', '#loadingIndicator');
                            resetForm('EmrHistory');
						} else {
							$(errorDivId).removeClass('alert-success').addClass('alert-danger').text(errorMessage).show();
						}
					});
				
					// Submit handler for Follow-Up form
$('#aptSubmit').on('click', function (event) {
  
    event.preventDefault();

    // Collect data from the form fields
    const patientId = $('#patientId').val(); // Get the patient ID
    const followUpDate = $('#followUpDate').val(); // Get the follow-up 
    console.log('id',patientId)
    console.log('wed',followUpDate)

    // Validate required fields
    if (!patientId || !followUpDate) {
        alert("Please provide both the patient ID and follow-up date.");
        return;
    }

    // Prepare form data object
    const formData = {
        patientId: patientId,
        appointmentDate: followUpDate
    };

    const errorDivId = '#errordiv6';

    // Save the form using the provided function
    saveForm(formData, errorDivId, '/saveFollowUp', '#loadingIndicator');
});

				});

				// Submit handler for prescription form
$('#prescriptionForm').on('submit', function (event) {
    event.preventDefault();
    const { isValid, errorMessage } = validateForm('#prescriptionForm');
    const formData = collectPrescriptionData();
    const errorDivId = '#errordiv4';

    // Check if there is at least one prescription entry
    if (formData.prescriptions.length === 0) {
        alert("Please add at least one prescription.");
        return; // Prevent form submission
    }

    if (isValid) {
        saveForm(formData, errorDivId, '/savePrescription', '#loadingIndicator');
		resetForm('prescriptionForm');
    } else {
        $(errorDivId).removeClass('alert-success').addClass('alert-danger').text(errorMessage).show();
    }
});


// Submit handler for Recommended Tests form
$('#recommendedTestsForm').on('submit', function (event) {
    event.preventDefault();
    
    const { isValid, errorMessage } = validateForm('#recommendedTestsForm');
    const formData = collectTestData();

    // Check if at least one test has been selected
    if (!formData.tests || formData.tests.length === 0) {
        alert("Please add at least one test.");
        return;
    }

    formData.patientId = $('#patientId').val(); // Append patient ID to form data

    const errorDivId = '#errordiv3';
    if (isValid) {
        saveForm(formData, errorDivId, '/saveRecTest', '#loadingIndicator');
        resetForm('recommendedTestsForm');
    } else {
        $(errorDivId).removeClass('alert-success').addClass('alert-danger').text(errorMessage).show();
    }
});

// Function to collect test data
function collectTestData() {
    const testsData = [];
    const testSelects = document.querySelectorAll('select[name="selectTest[]"]');
    const comment = $('#testComment').val(); // Get the common comment
    const patientId = $('#patientId').val(); // Get patient ID from hidden field

    // Collect test data from each row
    testSelects.forEach(select => {
        if (select.value) {
            testsData.push({
                test: select.value
            });
        }
    });

    // Prepare final form data object
    const formData = {
        patientId: patientId,
        tests: testsData,
        comment: comment
    };

    console.log("Recommended Tests Form Data:", JSON.stringify(formData)); // Debugging
    return formData;
}


// Function to collect prescription data from the form
function collectPrescriptionData() {
    const prescriptions = [];
    const rows = document.querySelectorAll('#prescriptionTable tr');

    rows.forEach(row => {
        const drug = row.querySelector('input[name="drug"]')?.value;
        const dose = row.querySelector('input[name="dose"]')?.value;
        const frequency = row.querySelector('select[name="frequency"]')?.value;
        const days = row.querySelector('input[name="days"]')?.value;

        if (drug && dose && frequency && days) {
            prescriptions.push({
                drug,
                dose: parseInt(dose, 10),
                frequency,
                days: parseInt(days, 10)
            });
        }
    });

    // Include any additional fields, such as comments
    const prescribedComment = document.getElementById('prescribedComment').value;
	const patientId= document.getElementById('patientId').value;

    // Create final formData object
    const formData = {
		patientId,
        prescriptions,
        prescribedComment
    };

    console.log("Prescription Data:", formData); // Log for debugging
    return formData;
}

				
			
				// ===============================
				// Utility Functions
				// ===============================

                function toggleCardBody(a, b) {
                    $("#" + a).toggle();
                    const icon = document.getElementById(b);

                    // Check if the element has the class `fa-angles-up` and toggle accordingly
                    if (icon.classList.contains("fa-angles-up")) {
                    icon.classList.remove("fa-angles-up");
                    icon.classList.add("fa-angles-down");
                    if(a == 'complaintCardBody'){
                        addNewRow();
                    }
                    if(a == 'recommendedTestsCardBody'){
                        addTestRow();
                    }
                    if(a == 'prescriptionCardBody'){
                        addNewPrescriptionRow();
                    }

                    } else {
                    icon.classList.remove("fa-angles-down");
                    icon.classList.add("fa-angles-up");
                    }
                    }

				document.addEventListener('DOMContentLoaded', () => {
					populateComplaints();
					// populateExaminationData(examinationData);
					populateHistory();
					populatePrescriptions();
					populateTests();
				});

				document.addEventListener('DOMContentLoaded', function() {
    fetchMedicineData();
});

// Fetch data from the API
let responseData = [];
function fetchMedicineData() {
    axios.get('/getItems') // Replace with your actual endpoint
        .then(response => {
            responseData = response.data;
            console.log('Fetched data:', responseData);
        })
        .catch(error => { 
            console.error('Error fetching medicine data:', error);
        });
}

// Add input event listener to the dynamically added inputs with class `search-input`
document.addEventListener('input', function(event) {
    if (event.target.classList.contains('search-input')) {
        const query = event.target.value;
        const suggestionsList = event.target.nextElementSibling; // Get the associated suggestions list
        showSuggestions(query, responseData, suggestionsList);
    }
});

// Function to filter and display suggestions
function showSuggestions(query, data, suggestionsList) {
    suggestionsList.innerHTML = ''; // Clear existing suggestions

    if (query.length === 0) return;

    const filteredData = data.filter(item => 
        item.name.toLowerCase().includes(query.toLowerCase()) ||
        item.molecule.toLowerCase().includes(query.toLowerCase())
    );

    filteredData.forEach(item => {
        const li = document.createElement('li');
        li.classList.add('list-group-item');
        li.style.cursor = 'pointer';
        li.innerHTML = `
            <strong>Item Name:</strong> ${item.name} &nbsp;
            <strong>Molecule:</strong> ${item.molecule} &nbsp;
            <strong>Price:</strong> ${item.sellingPrice} &nbsp;
            <strong>Category:</strong> ${item.category}
        `;

        // Add click event to populate input field with selected suggestion
        li.addEventListener('click', () => {
            const input = suggestionsList.previousElementSibling;
            input.value = item.name; // Populate input with the selected item's name
            suggestionsList.innerHTML = ''; // Clear suggestions
        });

        suggestionsList.appendChild(li);
    });
}
// Set up the checkbox event listener

function shbtn(a, b) {
    const checkbox = document.getElementById(a);
    const commentDate = document.getElementById(b);

    // Set initial visibility based on checkbox state
    commentDate.style.display = checkbox.checked ? "block" : "none";

    // Toggle the visibility of commentDate based on checkbox state
    checkbox.addEventListener("change", function () {
        if (checkbox.checked) {
            commentDate.style.display = "block";
        } else {
            commentDate.style.display = "none";
        }
    });
}
</script>

<script>
    function generateTimeSlots() {
      const daysOfWeek = ["mon", "tue", "wed", "thu", "fri", "sat", "sun"];
      const container = document.getElementById("calendarID");
      container.innerHTML = `<div class="date-header"></div>
         
          <div class="date-header">Mon, 11 Oct</div>
          <div class="date-header">Tue, 12 Oct</div>
          <div class="date-header">Wed, 13 Oct</div>
          <div class="date-header">Thu, 14 Oct</div>
          <div class="date-header">Fri, 15 Oct</div>
          <div class="date-header">Sat, 16 Oct</div>
          <div class="date-header">Sun, 17 Oct</div>`;

      // Loop through hours from 00 to 12
      for (let hour = 10; hour <= 18; hour++) {
        const formattedHour = hour.toString().padStart(2, "0");

        // Create a time slot label (e.g., "10:00 AM")
        const timeSlot = document.createElement("div");
        const amPm = hour < 12 ? "AM" : "PM";
        timeSlot.classList.add("time-slot");
        timeSlot.textContent = `${formattedHour}:00 ${amPm}`;
        container.appendChild(timeSlot);

        // Create appointment containers for each day of the week
        daysOfWeek.forEach((day) => {
          const appointmentContainer = document.createElement("div");
          appointmentContainer.classList.add("appointment-container");
          appointmentContainer.id = `${day}-${formattedHour}`;
          container.appendChild(appointmentContainer);
        });
      }
    }

    generateTimeSlots();

    const colors = [
      "#FF5733", // Vibrant Red-Orange
      "#33A1FF", // Sky Blue
      "#FFC300", // Bright Yellow
      "#8E44AD", // Rich Purple
      "#16A085", // Teal Green
      "#FF6F61", // Coral Pink
      "#4CAF50", // Fresh Green
      "#FF8C00", // Deep Orange
      "#6A5ACD", // Slate Blue
      "#FF1493", // Deep Pink
      "#1E90FF", // Dodger Blue
      "#FFD700", // Gold
      "#20B2AA", // Light Sea Green
      "#FF6347", // Tomato Red
      "#3CB371", // Medium Sea Green
    ];
    function getRandomColor() {
      const randomIndex = Math.floor(Math.random() * colors.length);
      return colors[randomIndex];
    }

    // Sample appointments data
    let appointments = [];
    let d = null;
    function getDayOfWeek(dateString) {
      const date = new Date(dateString);
      const days = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];
      const dayIndex = date.getUTCDay(); // Using getUTCDay() for UTC dates
      return days[dayIndex];
    }

    const fetchData = async () => {
      const response = await fetch("/getTodaysAppointments");
      const data = await response.json();

      console.log("data: ", data);
      appointments = data.weeklyAppointments;
      d = data;
      renderAppointments();
    };

    fetchData();

    // Function to render appointments
    function renderAppointments() {
      appointments.forEach((appointment) => {
        const container = document.getElementById(
          `${getDayOfWeek(appointment.date)}-${
            appointment.time.split(":")[0]
          }`
        );
        if (container) {
          const appointmentBlock = document.createElement("div");
          appointmentBlock.classList.add("appointment");
          appointmentBlock.style.backgroundColor = getRandomColor();
          appointmentBlock.textContent = `${appointment.patient.name} \\ ${appointment.patient.age} \\ ${appointment.patient.gender[0]}`;
          container.addEventListener("click", () => {
            // Add appointment details modal here
            console.log("Appointment details: ");
            ViewBtn("patient-emr", appointment.patient.id);
            // Open the modal here
            //...
          });
          container.innerHTML = appointmentBlock.outerHTML;
        }
      });
    }

    // Function to show today's appointments (example logic)
    // function showTodayAppointments() {
    //   // alert("Showing Today's Appointments (This is a placeholder function)");
    //   appointments = d.todaysAppointments;
    //   d.weeklyAppointments.forEach((appointment) => {
    //     const container = document.getElementById(
    //       `${getDayOfWeek(appointment.date)}-${
    //         appointment.time.split(":")[0]
    //       }`
    //     );
    //     container.innerHTML = "";
    //   });
    //   renderAppointments();
    // }

    // // Function to show weekly appointments (example logic)
    // function showWeeklyAppointments() {
    //   // alert("Showing Weekly Appointments (This is a placeholder function)");
    //   appointments = d.weeklyAppointments;
    //   renderAppointments();
    // }

    // // Event Listeners for buttons
    // document
    //   .getElementById("todayBtn")
    //   .addEventListener("click", showTodayAppointments);
    // document
    //   .getElementById("weeklyBtn")
    //   .addEventListener("click", showWeeklyAppointments);

    // // Render appointments on page load
    // document.addEventListener("DOMContentLoaded", renderAppointments);
  </script>

  <script>
    const fetchDiseses = async ()=>{
        try{
            const response = await fetch('/getDisease');
            const diseases = await response.json();
            diseases.forEach(disease => {
                const option = document.createElement('option');
                option.value = disease.id;
                option.textContent = disease.name;
                document.getElementById('diseaseSelect').appendChild(option);
            });
        } catch(error){
            console.error('Error loading diseases:', error);
        }
    }
    fetchDiseses();
    const getAllpoints = async (id)=>{
        try{
            const response = await fetch(`/diseaseSelect?id=${id}`);
            const points = await response.json();
            console.log(points);
            const container = document.getElementById('recommendedTestAdd');

            if(points.complaints && points.complaints.length){
                points.complaints[0].complaints.forEach(point => {
                    const container = document.getElementById('complaintsContainer');
					const newRow = document.createElement('div');
					newRow.classList.add('row', 'align-items-center', 'mb-2');
					newRow.innerHTML = `
						<div class="col-md-8">
							<div class="form-group">
								<input type="text" class="form-control input-style" value="${point}" name="complaint[]" disabled placeholder="Add Complaints" data-validation="required" data-error-message="Complaint is required">
							</div>
						</div>
						<div class="col-md-1 text-center">
							<i title="Remove Row" class="btn-secondary btn-style btn fas fa-minus " onclick="removeRow(this)"></i>
						</div>`;
					container.appendChild(newRow);
                })
            }
            if(points.tests && points.tests.length > 0){
                points.tests.forEach(point => {
                    const newRow = document.createElement('div');
    newRow.classList.add('row', 'align-items-center', 'mb-2');

    // Set up the basic structure of the row
    newRow.innerHTML = `
        <div class="col-md-5">
            <div class="form-group">
                <input class="form-control input-style" name="selectTest[]" data-validation="required" value="${point.name}" disabled data-error-message="Test selection is required" />
            </div>
        </div>
        <div class="col-md-2 text-center">
            <button type="button" class="btn btn-danger btn-style" onclick="removeTestRow(this)">
                <i class="fa-solid fa-minus"></i>
            </button>
        </div>
    `;

    // Append the new row to the container
    container.appendChild(newRow);
                });
            }

            if(points.medicines && points.medicines.length){
                points.medicines.forEach(point=>{
                    const prescriptionTable = document.getElementById("prescriptionTable");
        const newRow = document.createElement("tr");
        newRow.classList.add(
          "my-3",
          "gap-4",
          "justify-content-between",
          "align-items-center",
          "row-0"
        );

        newRow.innerHTML = `
          <td class="form-group position-relative">
              <input type="text" class="form-control input-style search-input" value="${point.name.drug}" disabled
                     name="drug" data-validation="required" data-error-message="Drug/Molecule is required">
              <ul class="list-group position-absolute w-100 suggestions-list" style="max-height: 200px; overflow-y: auto;"></ul>
          </td>
          <td><input type="number" name="dose" placeholder="Dose" class="form-control input-style"
                     data-validation="required" value="${point.name.dose}" disabled data-error-message="Dose is required"></td>
          <td>
              <input name="frequency" class="form-select input-style"
                      data-validation="required" value="${point.name.frequency}" disabled data-error-message="Frequency is required" />
          </td>
          <td><input type="number" name="days" placeholder="Days" value="${point.name.days}" disabled class="form-control input-style"
                     data-validation="required" data-error-message="Days are required"></td>
          <td class="text-center">
              <button type="button" class="btn btn-danger btn-style" onclick="removePrescriptionRow(this)">
                  <i class="fa-solid fa-minus"></i>
              </button>
          </td>
      `;

        prescriptionTable.appendChild(newRow);
                })
            }
            
            
        } catch(error){
            console.error('Error loading points:', error);
        }
    }
    document.getElementById("diseaseSelect").addEventListener("change",(e)=>{
        const id = e.target.value;
        getAllpoints(id);
    })
  </script>

			